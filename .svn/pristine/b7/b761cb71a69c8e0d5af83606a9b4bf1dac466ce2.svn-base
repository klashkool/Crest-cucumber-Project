package com.Sales_Modules;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;
import org.junit.Assert;
import org.openqa.selenium.Alert;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import com.Utils.Base;
import com.Utils.CrestTestDataReader;
import com.Utils.WebdriverWait;

public class Sales_SalesOrder extends Base {

	public static Logger log = Logger.getLogger(Sales_SalesOrder.class);
	static List<HashMap<String, String>> SO_data = CrestTestDataReader.getSOData();

	public static String so_Number;

	public static void SO_StartOrder() {

		WebdriverWait.findElement("link", "SALES").click();
		WebdriverWait.findElement("link", "Sales Order").click();
		WebdriverWait.findElement("link", "Create Sales Order").click();

		Select Org_DD = new Select(WebdriverWait.findElement("id", "billToCustomerPartyId"));
		Org_DD.selectByVisibleText(SO_data.get(0).get("Organization"));

		WebdriverWait.findElement("name", "partyId").sendKeys("10020");// Metal SHop
		WebdriverWait.findElement("name", "orderName").sendKeys("SO_NormalFlow");

		// Adding Current Date(From Date)
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String Fromdate = (dateFormat.format(new Date()));
		WebdriverWait.findElement("name", "orderDate_i18n").sendKeys(Fromdate);

		Select OrdType_DD = new Select(WebdriverWait.findElement("id", "orderType"));
		OrdType_DD.selectByVisibleText(SO_data.get(0).get("OrderType"));

		Select Currency_DD = new Select(WebdriverWait.findElement("id", "currencyUomId"));
		Currency_DD.selectByVisibleText(SO_data.get(0).get("Currency"));

		Select PrdStore_DD = new Select(WebdriverWait.findElement("id", "productStoreId"));
		PrdStore_DD.selectByVisibleText("General Sales Store");

		Select SalesChn_DD = new Select(WebdriverWait.findElement("id", "salesChannelEnumId"));
		SalesChn_DD.selectByVisibleText("Web Channel");

		Select NumType_DD = new Select(WebdriverWait.findElement("id", "numberingFormatId"));
		NumType_DD.selectByVisibleText("Sales order");

		WebdriverWait.findElement("id", "paymentMethodTypeAndId").click();
		WebdriverWait.findElement("link", "Continue").click();

	}

	public static void SO_ShippingDetails() {

		log.info("SO Adding Ship Groups");
		String facility = "_shipGroupFacilityId";
		String ShpAdd = "_contactMechId";
		String Shpmethd = "_shipping_method";

		for (int a = 0; a <= 2; a++) {
			Select Shpfacility = new Select(WebdriverWait.findElement("id", a + facility));
			Select ShpAddress = new Select(WebdriverWait.findElement("id", a + ShpAdd));
			Select ShpMethod = new Select(WebdriverWait.findElement("id", a + Shpmethd));
			if (a == 0) {
				Shpfacility.selectByVisibleText(SO_data.get(1).get("Facility-ShipGroup"));
				ShpAddress.selectByVisibleText("EASYFLOWERS");
				ShpMethod.selectByVisibleText("Standard");
				WebdriverWait.findElement("xpath", "//*[@id='content-main-section']//div//a").click();
			} else if (a == 1) {
				Shpfacility.selectByVisibleText(SO_data.get(6).get("Facility-ShipGroup"));
				ShpAddress.selectByVisibleText("EASYFLOWERS");
				ShpMethod.selectByVisibleText("Standard");
				WebdriverWait.findElement("xpath", "//*[@id='content-main-section']//div//a").click();
			} else if (a == 2) {
				Shpfacility.selectByVisibleText(SO_data.get(9).get("Facility-ShipGroup"));
				ShpAddress.selectByVisibleText("EASYFLOWERS");
				ShpMethod.selectByVisibleText("Standard");
			}
		}
		WebdriverWait.findElement("xpath", "//*[@id='content-main-section']//div[3]//a[1]").click();
	}

	public static void SO_OrderItems() throws InterruptedException {

		log.info("SO Adding products");
		for (int p = 0; p <= 9; p++) {

			Thread.sleep(1000);
			WebdriverWait.findElement("name", "add_product_id").sendKeys(SO_data.get(p).get("Product ID"));

			WebdriverWait.findElement("name", "quantity").sendKeys(SO_data.get(p).get("Qty"));

			Select Dept_DD = new Select(WebdriverWait.findElement("id", "departmentName"));
			Dept_DD.selectByVisibleText(SO_data.get(p).get("Dept"));

			Select Fac_DD = new Select(WebdriverWait.findElement("id", "toGroupIndex"));
			if (p <= 4) {
				Fac_DD.selectByVisibleText(SO_data.get(0).get("Facility-ShipGroup"));
				WebElement ATP = WebdriverWait.findElement("id", "ATP");
				WebElement QOH = WebdriverWait.findElement("id", "QOH");
				Assert.assertEquals(true, ATP.isDisplayed());
				Assert.assertEquals(true, QOH.isDisplayed());

			} else if (p >= 5 && p <= 7) {
				Fac_DD.selectByVisibleText(SO_data.get(5).get("Facility-ShipGroup"));
				WebElement ATP = WebdriverWait.findElement("id", "ATP");
				WebElement QOH = WebdriverWait.findElement("id", "QOH");
				Assert.assertEquals(true, ATP.isDisplayed());
				Assert.assertEquals(true, QOH.isDisplayed());
			} else if (p >= 8 && p <= 9) {
				Fac_DD.selectByVisibleText(SO_data.get(8).get("Facility-ShipGroup"));
				WebElement ATP = WebdriverWait.findElement("id", "ATP");
				WebElement QOH = WebdriverWait.findElement("id", "QOH");
				Assert.assertEquals(true, ATP.isDisplayed());
				Assert.assertEquals(true, QOH.isDisplayed());
			}

//			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("dropShipReq")));
//			Select DropShp_DD = new Select(WebdriverWait.findElement("id","dropShipReq")));
//			DropShp_DD.selectByVisibleText("No");

			WebElement Price = WebdriverWait.findElement("id", "priceValue");
			Assert.assertEquals(true, Price.isDisplayed());
			WebdriverWait.findElement("name", "itemComment").sendKeys("Test");
			WebdriverWait.findElement("name", "submitItems").click();
		}

		WebdriverWait.findElement("link", "Continue").click();
		WebdriverWait.findElement("link", "Create").click();
		Alert alert = driver.switchTo().alert();
		alert.accept();
		log.info("SO Number Created Successfully");

		Sales_SalesOrder_View.Capture_SONum();

	}

}
